#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <sleep.h>


#include "platform.h"
#include "xadcps.h"
#include "xparameters.h"
#include "xuartps.h"
#include "xil_printf.h"
#include "xil_io.h"

char input(char *buff, int size);
int fract(float num);
void setupDACVoltage();

int main()
{
	init_platform();

	u16 data = 1;
	u16 data0 = 0;
	u16 data8 = 0;
	while(1) {

		setupDACVoltage();
		usleep(100000);

		data = (Xil_In32(VPVN_ADDR) * 0.015);
		data0 = (Xil_In32(VAUX0_ADDR) * 0.015);
		data8 = (Xil_In32(VAUX8_ADDR)* 0.015);

		xil_printf("data: %03dmv\n\r", data);
		xil_printf("data0: %03dmv\n\r", data0);
		xil_printf("data8: %03dmv\n\r", data8);
	}

	cleanup_platform();
	return 0;
}

int fract(float num) {
	float tmp;

	tmp = num;
	if (num < 0) {
		tmp = -(num);
	}

	return( ((int)((tmp -(float)((int)tmp)) * (1000.0f))));
}

void setupDACVoltage() {
	print("Set DAC voltage level:\n");

	const int size = 32;
	char buff[size];
	input(buff);

	float Vmax = 2.5;
	float in = atof(buff);
	if (in > Vmax || in < 0) {
		printf("Incorrect input value: %f\n", in);
		print("The value must be between 0 and 2.5\n");
	} else	{
		printf("The DAC voltage is ~ %f\n", in);
	}

	float ratio = in / Vmax;
	int val = (int)(65535*ratio);

	//66060288 = 001111110000000000000000 write and update both DACs
	// Multiply the value by 16 in order to compensate for the 4 LSB zeros
	Xil_Out32(XPAR_AD5065_DUAL_DAC_AXI_0_BASEADDR, 66060288 + 16*val);

}

char input(char *buff, int size) {
	memset(buff, 0x00, size);

	int i = 0;
	char in;
	while (1) {
		in = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR); // reading from terminal

		if (in == 13) {
			break;
		} else {
			if (i < size) {
				buff[i] = in;
				i++;
			} else if (i == size) {
				xil_printf("\n The buffer is overflowing!!!\n");
			}
		}
	}
	return 0;
}
